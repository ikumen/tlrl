# Default profile responsible for setting properties common across
# all environments.
spring:
  profiles:
    include:
      - local
  # TODO: Remove, leave for further write-up
  # Profile pull from Maven profile property during the build process.
  # It's tied to a specific Maven profile that is responsible for loading
  # the target database dependencies.
  #- @database.profile@
  jpa:
    show-sql: false
  datasource:
    # Normally we want to connect as a database user, not admin
    username: ${TLRL_DB_USER:?}
    password: ${TLRL_DB_USER_PASSWORD:?}
  thymeleaf:
    cache: false
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 
            client-secret: 
          github:
            client-id: 
            client-secret: 
  jackson:
    serialization:
      WRITE_ENUMS_USING_TO_STRING: true
    deserialization:
      READ_ENUMS_USING_TO_STRING: true

app:
  kafka:
    groupId: tlrl-app
    bootstrap-servers: ${TLRL_KAFKA_BROKERS:?}
  solr:
    baseUrls:
      - http://${TLRL_SOLR_SERVER:?}/solr/tlrl
  events:
    bookmark:
      archived: bookmark.archived
      created: bookmark.created
      deleted: bookmark.deleted
      updated: bookmark.updated

logging:
  level:
    org:
      springframework: ERROR
      hibernate: ERROR
    com.gnoht.tlrl: ERROR

---
#
# Development specific profile
# Note: if using postgres in development, you may want to use the an admin level 
# user if we need to let hibernate auto-generate the ddl.
spring:
  profiles: dev
  datasource:
    continue-on-error: true
  jpa:
    show-sql: true

app:
  kafka:
    bootstrap-servers: ${TLRL_KAFKA_BROKERS:localhost:9093}
  solr:
    baseUrls:
      - http://${TLRL_SOLR_SERVER:localhost:8983}/solr/tlrl

logging:
  level:
    org:
      springframework: INFO
      hibernate: ERROR
    com.gnoht.tlrl: DEBUG
---
#
# Profile responsible for setting the H2 specific JDBC/JPA properties.
# This should ONLY be run in conjunction with "dev"
#
spring:
  profiles: h2
  datasource:
    url: jdbc:h2:file:./target/h2/${TLRL_DB_NAME:tlrldb};MODE=PostgreSQL
    driverClassName: org.h2.Driver
    platform: h2-dev
  jpa:
    hibernate:
      'ddl-auto': ${TLRL_DB_DDL_AUTO:update}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
  h2:
    console:
      enabled: true
      path: /h2-console

---
#
# Profile responsible for setting our production PostgreSQL specific JDBC/JPA 
# properties. 
#
spring:
  profiles: postgres
  datasource:
    url: jdbc:postgresql://${TLRL_DB_SERVER_HOSTNAME}:${TLRL_DB_SERVER_PORT}/${TLRL_DB_NAME}
    driverClassName: org.postgresql.Driver
  jpa:
    hibernate:
      'ddl-auto': ${TLRL_DB_DDL_AUTO:none}
      default_schema: public
    properties:
      dialect: org.hibernate.dialect.PostgreSQLDialect
