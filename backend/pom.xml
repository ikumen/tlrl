<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.2.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>com.gnoht</groupId>
  <artifactId>tlrl</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>tlrl</name>
  <description>Too long; read later - bookmarking application</description>

  <properties>
    <java.version>1.8</java.version>
    <querydsl.version>4.1.3</querydsl.version>
    <postgresql.version>42.2.12</postgresql.version>
    <maven-surefire-plugin.version>3.0.0-M4</maven-surefire-plugin.version>
    <flyway-maven-plugin.version>6.4.2</flyway-maven-plugin.version>
    <lettuce-core.version>5.3.0.RELEASE</lettuce-core.version>
    <solr-solrj.version>8.5.0</solr-solrj.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <version>1</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-config</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-oauth2-client</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-oauth2-jose</artifactId>
    </dependency>
		<dependency>
		  <groupId>org.apache.solr</groupId>
		  <artifactId>solr-solrj</artifactId>
		</dependency>
    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-apt</artifactId>
<!--      <version>${querydsl.version}</version>-->
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-jpa</artifactId>
<!--      <version>${querydsl.version}</version>-->
    </dependency>


    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <profiles>
    <!-- //
    Build with this profile to target an embedded H2 database. This profile is activated
    by default, but can be explicitly activated two ways:
      - with "./mvnw spring-boot:run -P h2-db-profile"
      - with "./mvnw spring-boot:run -Ddb=h2"
    // -->
    <profile>
      <id>h2-db-profile</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <property>
          <name>db</name>
          <value>h2</value>
        </property>
      </activation>
      <properties>
        <database.profile>h2</database.profile>
      </properties>
      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
    </profile>
    <!--//
    Build with this profile to target a PostgreSQL database. Two ways to activate the profile,
    both are on command line:
      - with "./mvnw spring-boot:run -P postgres-db-profile"
      - with "./mvnw spring-boot:run -Ddb=postgres"
    // -->
    <profile>
      <id>postgres-db-profile</id>
      <activation>
        <property>
          <name>db</name>
          <value>postgres</value>
        </property>
      </activation>
      <properties>
        <database.profile>postgres</database.profile>
        <!-- //
        Flyway properties, used in the schema migrations. To override them use -D (e.g, -DdbName=foobar).
        Note: we're only using Flyway against the PostgreSQL database, not H2. When this profile is activated
        these properties are made available.
        // -->
        <dbHost>localhost</dbHost>
        <dbPort>5432</dbPort>
        <dbName>tlrldb</dbName>      <!-- name of the tlrl database -->
        <dbAdmin>tlrladmin</dbAdmin>  <!-- name of admin user -->
        <dbUser>tlrluser</dbUser>    <!-- name of the app user, not the admin -->
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>${postgresql.version}</version>
        </dependency>
      </dependencies>
    </profile>
  </profiles>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <!-- //
      For database migrations, see: https://flywaydb.org/documentation/ Note: we only run Flyway on PostgreSQL database.
        $ FLYWAY_USER=postgres FLYWAY_PASSWORD=<..> ./mvnw fly:migrate -Ddb=postgres
      // -->
      <plugin>
        <groupId>org.flywaydb</groupId>
        <artifactId>flyway-maven-plugin</artifactId>
        <configuration>
          <url>jdbc:postgresql://${dbHost}:5432/${dbName}</url>
          <schemas>
            <schema>public</schema>
          </schemas>
          <locations>
            <location>filesystem:${project.basedir}/db/migrations</location>
          </locations>
          <placeholders>
            <dbAdmin>${dbAdmin}</dbAdmin>
            <dbUser>${dbUser}</dbUser>
          </placeholders>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.mysema.maven</groupId>
        <artifactId>apt-maven-plugin</artifactId>
        <version>1.1.3</version>
        <executions>
          <execution>
            <goals>
              <goal>process</goal>
            </goals>
            <configuration>
              <outputDirectory>target/generated-sources/annotations</outputDirectory>
              <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
