# Compose all services required for running the TLRL application.
#
# Run TLRL application with embedded H2 instance:
# > docker-compose up zookeeper kafka solr nginx fetcher app
#
# http://localhost:8080/ for direct access to application server
# http://localhost:9080/ for reversed proxied version of the app
#
---
version: '3.8'
networks:
  default:
    external: false
    name: tlrl

services:
  solr:
    image: solr:8.5.1
    container_name: solr
    restart: "no"
    volumes:
      - "./target/solr:/var/solr"
      - "./config/solr/tlrl/conf:/var/solr/data/tlrl/conf"
      - "./config/solr/tlrl/core.properties:/var/solr/data/tlrl/core.properties"
      - "./target/solr/data/tlrl/data:/var/solr/data/tlrl/data"
    ports:
      - "8983:8983"

  zookeeper:
    image: bitnami/zookeeper:3
    container_name: zookeeper
    ports:
      - '2181:2181'
    volumes:
      - './target/zookeeper:/bitnami/zookeeper'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:2
    container_name: kafka
    volumes:
      - './target/kafka:/bitnami/kafka'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    ports:
      - '9092:9092'
      - '9093:9093'
    depends_on:
      - 'zookeeper'

  postgres:
    image: postgres:12.3-alpine
    container_name: postgres
    restart: "no"
    environment:
      - DB_NAME=${DB_NAME:-tlrldb}
      - DB_ADMIN=${DB_ADMIN:-tlrladmin}
      - DB_USER=${DB_USER:-tlrluser}
      - DB_ADMIN_PASSWORD=${DB_ADMIN_PASSWORD:-tlrladmin}
      - DB_USER_PASSWORD=${DB_USER_PASSWORD:-tlrluser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - "./config/db/postgres/schema:/docker-entrypoint-initdb.d"
      - "./target/postgres:/var/lib/postgresql/data"
    ports:
      - "5432:5432"

  tlrl-fetcher:
    build:
      context: ./fetcher
    image: tlrl-fetcher
    restart: on-failure
    container_name: tlrl-fetcher
    entrypoint: ["./start-after.sh", "${KAFKA_BROKERS:-kafka:9092}", "tlrl-app:8080"]
    environment:
      - FETCHER_LOG_LVL=${FETCHER_LOG_LVL:-4}
      - FETCHER_KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - FETCHER_SOLR_SERVER=${SOLR_SERVER:-solr:8983}
    volumes:
      - "./target/archive:/data/archive"
    depends_on:
      - kafka
      - zookeeper

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: "no"
    environment: 
      - TLRL_SERVER_PORT=8080
    volumes:
      - "./config/nginx/nginx.development.conf:/etc/nginx/nginx.conf"
      - "./config/nginx/dev/tlrl.development.conf:/etc/nginx/templates/tlrl.development.conf.template"
      - "./target/archive:/data/archive"
    ports:
      - "9080:9080"

  tlrl-app:
    build:
      context: .
      args:
        - TLRL_SKIP_TESTS=true
        - TLRL_TARGET_DB=${TLRL_TARGET_DB:-h2}
        - TLRL_SPRING_PROFILES=${TLRL_SPRING_PROFILES:-dev}
    image: tlrl-app
    container_name: tlrl-app
    environment:
      - TLRL_TARGET_DB=${TLRL_TARGET_DB:-h2}
      - TLRL_SPRING_PROFILES=${TLRL_SPRING_PROFILES:-dev}
      - TLRL_KAFKA_BROKERS=${TLRL_KAFKA_BROKERS:-kafka:9092}
      - TLRL_SOLR_SERVER=${TLRL_SOLR_SERVER:-solr:8983}
      - TLRL_DB_NAME=${TLRL_DB_NAME:-tlrldb}
      - TLRL_DB_USER=${TLRL_DB_USER:-tlrluser}
      # postgres specific
      - TLRL_DB_USER_PASSWORD=${TLRL_DB_USER_PASSWORD:-tlrluser}
      - TLRL_DB_SERVER_HOSTNAME=${TLRL_DB_SERVER_HOSTNAME:-localhost}
      - TLRL_DB_SERVER_PORT=${TLRL_DB_SERVER_PORT:-5432}
      - TLRL_DB_DDL_AUTO=${TLRL_DB_DDL_AUTO:-update}
    ports:
      - "8080:8080"
    depends_on:
      - kafka
